---
title: "TD2"
output: html_document
---

```{r}
library(data.table)
flights <- fread("~/Documents/M2/Cours_Agro_J1_Programmation_R/TD/flights14.csv")
flights
dim(flights)
tables()
```
2. SÃ©lectionner les 10 premiÃ¨res lignes.

```{r}
flights[1:10]
```


3. SÃ©lectionner les lignes qui ont pour origin lâaÃ©roport JFK
```{r}
flights[origin == "JFK"]

```

4. SÃ©lectionner les lignes qui ont pour origin lâaÃ©roport JFK et comme date de vol le mois (month) de
juillet.
```{r}
flights[origin == "JFK" & month==6]
```

5. Ordonner par mois, jour, dep_time, et cela avec les fonctions order, setorder, et en utlisant des clÃ©s.
```{r}
flights[order(month,day,dep_time)]
setorderv(flights,c("month","day","dep_time"))
setkey(flights,month,day,dep_time)
```

6. Ordonner par mois, jour, dep_time (ordre dÃ©croissant)
```{r}
flights[order(-month,-day,-dep_time)]


```

7. SÃ©lectionner la premiÃ¨re colonne de flights et renvoyer un vecteur (tester le resultat avec is.vector).
```{r}
prem_col <- c(flights[,1])
is.vector(prem_col)
```

8. SÃ©lectionner la premiÃ¨re colonne de flights et renvoyer un data.table (tester le resultat avec
is.data.table).
```{r}
table_flight <- is.data.table(flights[,1])
```

9. Afficher le nuage de points air_time fonction de distance.
```{r}
ggplot(data = flights, aes(x = air_time, y = distance)) + geom_point(shape=23, fill="blue", color="darkred", size=3)

plot(flights$air_time, flights$distance,type = "p")
```

10. Afficher le nuage de points air_time fonction de distance avec une couleur qui dÃ©pend du mois, puis
du carrier (convertir ce dernier en factor puis en as.numeric)


11. Afficher le nuage de points air_time fonction de distance par mois (sur une fenÃªtre graphique contenant
10 graphiques)


12. Effectuer une rÃ©gression linÃ©aire simple air_time en fonction de distance.

13. Calculer le nombre de vols qui dÃ©marrent de JFK par mois

```{r}
flights[origin == "JFK", .N, by = month]
```


14. Calculer le nombre de vols qui dÃ©marrent de JFK par mois et par jour, en renommant la nouvelle
variable nbvols
```{r}
flights[origin == "JFK", .N, by = c("month", "day")]

```

15. Calculer le nombre moyen de vol par jour (sur tous les mois), grÃ¢ce Ã  un chainage
```{r}
Nb_vol<- flights[,list(Nbvol= .N), by = list(month,day)][, mean(Nbvol)]
print("on a %s vol par jour"%(Nb_vol))
```

16. Calculer le nombre de vols qui dÃ©marrent de JFK et qui arrive (dest) Ã  LAX.
```{r}
flights[origin == "JFK" & dest == "LAX", .N]
nrow(flights[origin == "JFK" & dest == "LAX",])
```

17. Faire la moyenne des retards au dÃ©part (dep_delay) et Ã  lâarrivÃ©e (arr_delay) par compagnie (carrier)
```{r}
stats_delay <- flights[, list("mean_arr_delay" = mean(arr_delay),
                              "mean_dep_delay" = mean(dep_delay)), by = carrier]
is.data.frame(stats_delay)
```

18. Utiliser lâopÃ©rateur de .SD pour faire les quantiles des retards au dÃ©part et Ã  lâarrivÃ©e par compagnie
(carrier) via .SDcols
```{r}
col_sd <- c("arr_delay", "dep_delay")
flidgh_quantile <- flights[, lapply(.SD, quantile), by = carrier, .SDcols = col_sd]

flidgh_quantile[, quantile := rep(c("Min", "Q25", "Q50", "Q75", "Max"), 14)] # rÃ©cupÃ©rer quantiles bien associÃ©s
dcast(data = flidgh_quantile, 
      carrier ~ quantile ,
      value.var = c("arr_delay", "dep_delay"))
```

19. CrÃ©er un data.table ff qui est la concatÃ©nation en colonne de flights et la distance au carrÃ© contenue
dans flights (cbind)
```{r}


```

20. Refaire la mÃªme chose en utilisant lâopÃ©rateur :=
```{r}
distance_2<-flights[, c("distance_2") := distance ^ 2]

```

21. Remplacer la distance par la distance au carrÃ© en utilisant :=
```{r}
flights[, c("distance") := distance_2]
```

22. CrÃ©er une colonne speed Ã©gale Ã  distance /(air_time/60)
```{r}
flights[, c("speed") := distance/(air_time/60)]
```


23. CrÃ©er deux nouvelles colonnes : trip, concatÃ©nation de origin et dest, et delay somme de arr_delay
et dep_delay
```{r}
flights[, c("trip", "delay") := list(paste(origin, dest, sep = "-"), "delay" = arr_delay + dep_delay)]
```

24. Que fait le code suivant :
flights[, max_speed := max(speed), by=.(trip)]
25. Remplacer, pour la colonne origin, le code JFK par JFKennedy
26. CrÃ©ons le data.table miniature suivant:
DT <- data.table(ID = c("b","b","b","a","a","c"), x = 1:6, y = 7:12, z = 13:18)
27. que font :
DT[, .(val = c(x, y)), by = ID]
DT[, .(val = list(c(x, y))), by = ID]
DT[, .(val = list(paste(x, y ,sep = ":"))), by = ID]
DT[, .(val = list(paste(x, y, sep = ":")))]
DT[, .(val = paste(x, y, sep = ":"))]
28. Reprendre les questions du TD en utilisant un systÃ¨me de clÃ©s et en comparant les performances (quand
cela est pertinent. . . )
29. Reprendre les questions du TD et effectuer les mÃªmes opÃ©rations avec un data.frame, en comparant
les performances (quand cela est pertinent. . . )


